// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/01/Mux4Way16.hdl

/**
 * 4-way 16-bit multiplexor:
 * out = a if sel == 00
 *       b if sel == 01
 *       c if sel == 10
 *       d if sel == 11
 */

CHIP Mux4Way16 {
    IN a[16], b[16], c[16], d[16], sel[2];
    OUT out[16];

    PARTS:
    // Idea use 4 nested Mux ignoring the 16 bit witdthness
    // edit: wait lol looks I can do it with 3, what a pleasant surprise
    Mux(a=a[0], b=b[0], sel=sel[1], out=innermux0);
    Mux(a=c[0], b=d[0], sel=sel[1], out=outermux0);
    Mux (a=innermux0, b=outermux0, sel=sel[0]);
    Mux(a=a[1], b=b[1], sel=sel[1], out=innermux1);
    Mux(a=c[1], b=d[1], sel=sel[1], out=outermux1);
    Mux (a=innermux1, b=outermux1, sel=sel[0]);
    Mux(a=a[2], b=b[2], sel=sel[1], out=innermux2);
    Mux(a=c[2], b=d[2], sel=sel[1], out=outermux2);
    Mux (a=innermux2, b=outermux2, sel=sel[0]);
    Mux(a=a[3], b=b[3], sel=sel[1], out=innermux3);
    Mux(a=c[3], b=d[3], sel=sel[1], out=outermux3);
    Mux (a=innermux3, b=outermux3, sel=sel[0]);
    Mux(a=a[4], b=b[4], sel=sel[1], out=innermux4);
    Mux(a=c[4], b=d[4], sel=sel[1], out=outermux4);
    Mux (a=innermux4, b=outermux4, sel=sel[0]);
    Mux(a=a[5], b=b[5], sel=sel[1], out=innermux5);
    Mux(a=c[5], b=d[5], sel=sel[1], out=outermux5);
    Mux (a=innermux5, b=outermux5, sel=sel[0]);
    Mux(a=a[6], b=b[6], sel=sel[1], out=innermux6);
    Mux(a=c[6], b=d[6], sel=sel[1], out=outermux6);
    Mux (a=innermux6, b=outermux6, sel=sel[0]);
    Mux(a=a[7], b=b[7], sel=sel[1], out=innermux7);
    Mux(a=c[7], b=d[7], sel=sel[1], out=outermux7);
    Mux (a=innermux7, b=outermux7, sel=sel[0]);
    Mux(a=a[8], b=b[8], sel=sel[1], out=innermux8);
    Mux(a=c[8], b=d[8], sel=sel[1], out=outermux8);
    Mux (a=innermux8, b=outermux8, sel=sel[0]);
    Mux(a=a[9], b=b[9], sel=sel[1], out=innermux9);
    Mux(a=c[9], b=d[9], sel=sel[1], out=outermux9);
    Mux (a=innermux9, b=outermux9, sel=sel[0]);
    Mux(a=a[10], b=b[10], sel=sel[1], out=innermux10);
    Mux(a=c[10], b=d[10], sel=sel[1], out=outermux10);
    Mux (a=innermux10, b=outermux10, sel=sel[0]);
    Mux(a=a[11], b=b[11], sel=sel[1], out=innermux11);
    Mux(a=c[11], b=d[11], sel=sel[1], out=outermux11);
    Mux (a=innermux11, b=outermux11, sel=sel[0]);
    Mux(a=a[12], b=b[12], sel=sel[1], out=innermux12);
    Mux(a=c[12], b=d[12], sel=sel[1], out=outermux12);
    Mux (a=innermux12, b=outermux12, sel=sel[0]);
    Mux(a=a[13], b=b[13], sel=sel[1], out=innermux13);
    Mux(a=c[13], b=d[13], sel=sel[1], out=outermux13);
    Mux (a=innermux13, b=outermux13, sel=sel[0]);
    Mux(a=a[14], b=b[14], sel=sel[1], out=innermux14);
    Mux(a=c[14], b=d[14], sel=sel[1], out=outermux14);
    Mux (a=innermux14, b=outermux14, sel=sel[0]);
    Mux(a=a[15], b=b[15], sel=sel[1], out=innermux15);
    Mux(a=c[15], b=d[15], sel=sel[1], out=outermux15);
    Mux (a=innermux15, b=outermux15, sel=sel[0]);
}